// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl =  env("DIRECT_URL")
}

model User{
  id               Int           @id @default(autoincrement())
  GoogleId         String?       @unique
  name             String
  email            String        @unique
  receiptConfig    ReceiptConfig @relation(fields: [receiptPrefix], references: [prefix])
  receiptPrefix    String
  eventsInCharge   Event[]
  transactionsMade Transaction[]
}

model Donor {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  name         String?
  phonenum     String?
  events       Event[]
  transactions Transaction[]
}

// ticket
// add phonenum to donor 
// {

//   eventId: 1,
//   name: '',
//   phonenum:'',
//   email:
//   // random string unqie UUID
//   ticketNumber: '',
//   transactionId: 1,
//   attended:false,
//   checkinTime: null,
//   notes: ''


// }
model Event {
  id            Int           @id @default(autoincrement())
  eventName     String
  eventDate     DateTime
  eventLocation String?
  eventStatus   Boolean       @default(true)
  fee           Float?
  eventDeadline DateTime
  eventCoordinators User[]
  attendees     Donor[]
  transactions  Transaction[]
}

model Transaction {
  id              Int                 @id @default(autoincrement())
  entryDate       DateTime
  transactionDate DateTime            @default(now())
  donor           Donor               @relation(fields: [donorID], references: [id])
  donorID         Int
  event           Event?              @relation(fields: [eventID], references: [id])
  eventID         Int?
  paymentMethod   PaymentMethod
  amount          Float
  receipt         TransactionReceipt? @relation(fields: [receiptID], references: [receiptNumber])
  receiptID       String?             @unique
  config          ReceiptConfig?      @relation(fields: [configPrefix], references: [prefix])
  configPrefix    String?
  referenceNumber String?
  transactionType TransactionType
  status          Status
  createdBy       User                @relation(fields: [createdByID], references: [id])
  createdByID     Int
  note            String?
}

model TransactionReceipt {
  receiptNumber String       @id
  transaction   Transaction?
  email         String
  name          String
  sendDate      DateTime  @default(now())
}


//work on receipt config (make it autoincrement after transaction)
//get config based on user
//save transaction
//save receipt
//update config
//put all in one transaction

// boolean autosend
// true: send receipt after transaction creation
// false: create receipt but do not send
// endpoint to send receipt (transactionId)


model ReceiptConfig {
  prefix String @id
  nextNumber Int @default(1)
  user User[]
  name String @unique
  autosend Boolean @default(false)
  endpoint Transaction[]
}

enum PaymentMethod {
  CASH
  CHECK
  ZELLE
}

enum Roles {
    ADMIN
    AUDITOR
    EVENTCOORDINATOR
}

enum TransactionType {
  DEPOSIT
  EXPENSE 
}

enum Status {
  PENDING
  COMPLETED
  VOID
}